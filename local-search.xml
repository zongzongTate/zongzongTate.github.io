<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库#1</title>
    <link href="/2022/07/02/database1/"/>
    <url>/2022/07/02/database1/</url>
    
    <content type="html"><![CDATA[<p>本文的内容全部基于我校老师所发的数据库复习提纲</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><strong>一、概述</strong></h2><p>1、E-R图的表示方法</p><ul><li>矩形框表示实体</li><li>椭圆框表示属性</li><li>实心线段连接实体与属性</li><li>菱形框表示实体之间的联系</li></ul><p>2、实体之间的联系形式</p><ul><li>一对一（1 1）</li><li>一对多（1 n）</li><li>多对多（m n）</li></ul><p>3、理解概念模型、逻辑模型、物理模型</p><ul><li>概念模型：现实世界到机器世界的一个中间层次。现实世界到信息世界的第一层抽象，用于信息世界的建模</li><li>逻辑模型：一种图形化的展现方式，将概念模型具体化。（有层次、网状和关系模型）</li><li>物理模型：描述数据是如何在计算机中存储的，如何表达记录结构、记录顺序、访问路径等信息。将逻辑模型的内容在具体的物理介质上实现。</li></ul><p>4、什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库系统具有数据与程序的独立性？</p><ul><li>物理独立性：当数据的内模式改变了，即存储结构改变了，只需要管理员对模式&#x2F;内模式英雄做改变就可以保持模式不变。应用程序不必修改。</li><li>逻辑独立性：当模式改变时，如增加关系、属性时，数据库管理员对外模式&#x2F;模式映像做相应改变，就可以保证外模式不变。应用程序不必修改。</li><li>为什么：数据的定义和描述可以从应用程序分离。简化了应用程序的编制，大大减少了应用程序的维护和修改</li></ul><p>5、数据库管理系统的主要管理功能？</p><ul><li>数据组织、存储和管理</li><li>数据操作</li><li>数据库运行管理</li><li>不太清楚所谓的主要管理功能。自行总结如上。定义、保护、维护和通信的功能应该不算管理。自己看着办吧</li></ul><p>6、E-R图绘制</p><ul><li><del>懂得都懂，不懂得我也不好多说什么了</del></li></ul><h2 id="二、关系代数"><a href="#二、关系代数" class="headerlink" title="二、关系代数"></a><strong>二、关系代数</strong></h2><p>1、理解关系代数基本运算</p><ul><li>并</li><li>差</li><li>交</li><li>笛卡尔积</li><li>选择</li><li>投影</li><li>连接</li><li>除运算</li><li>五大基本操作：并、差、笛卡尔积、投影、选择</li><li>其他操作：交、连接、除</li></ul><p>2、关系表有多个候选键，但只能选定其中一个做为主键</p><p>3、投影和选择运算要重点掌握，投影后，元组数量不发生变化，选择后，属性数量不发生变化</p><p>4、理解自然连接、外连接（左、右、全）</p><ul><li>自然连接：一种特殊的等值连接。相等的必须是公共属性,属性名也要相同。会除去重复属性。</li><li>外连接：保留悬浮元组的连接。悬浮元组即俩关系在自然连接时被舍弃的元组。左外保留左边关系的悬浮元组，右外保留右边、全外保留全部</li></ul><p>5、理解主键、外键的概念及关系</p><ul><li>主键：一列或多列的组合，值能唯一标识的每一行，不可为空。保证实体完整性。</li><li>外键：关系间引用时用到。某关系中的码与另一关系（也可以是自己）的主码对应，即为外码（键）。</li><li>关系：外键和其对应的主键可以不同名，但一般同名。此外，外码可取空，但一空全空，表示含义具体分析。</li></ul><p>6、能用关系代数表达对关系表的查询操作</p><ul><li><del>不会的都突突了吧</del></li></ul><h2 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a><strong>三、SQL</strong></h2><blockquote><p>sql章节所占分数最多</p></blockquote><p>1、要掌握单表查询、多表连接查询、嵌套查询、分组运算、排序、选择、投影等操作。</p><blockquote><p>去吃个饭，回来继续写</p></blockquote><blockquote><p>吃完饭回来了</p></blockquote><ul><li><del>做那么多实验，都该会了</del></li></ul><p>2、视图的作用？如何定义视图？</p><ul><li>作用：1、简化用户操作；2、灵活性高，能使用户从多种角度看待统一数据；3、对重构数据库提供了一定程度的逻辑独立性；4、能够对机密数据提供安全保护；5、结构清晰。</li><li>如何定义：CREATE VIEW [视图名] as &lt;SELECT 语句&gt;</li></ul><p>3、如何去掉查询结果的重复元组（记录）</p><ul><li>distinct关键字。平常默认为all</li></ul><p>4、HAVING和where语句的用途</p><ul><li>HAVING作用于分组，对分组进行限制输出，Where作用于整个表，用来选择满足条件的行</li></ul><p>5、ALTER TABLE用来修改表的结构（数据库模式）</p><ul><li>改数据、改列属性、改列名、加列都可以</li></ul><p>6、判断空值用“IS NULL”</p><ul><li><del>提纲都直接给列出来了，哈哈</del></li></ul><p>7、数据系统中，对存取权限的定义称为授权，授权和收回授权如何定义？</p><ul><li>用GRANT语句和REVOKE语句</li><li>GRANT &lt;权限&gt; ON &lt;对象类型&gt;&lt;对象名&gt; TO &lt;用户&gt;</li><li>REVOKE &lt;权限&gt; ON  &lt;对象类型&gt;&lt;对象名&gt; TO &lt;用户&gt;</li><li>在句子的末尾加上WITH GRANT OPTION就是允许被授权用户授权其他用户</li></ul><p>8、单列排序、多列排序</p><ul><li>ORDER BY 关键字 ASC升序，DESC降序</li><li>后面可以跟多个列名。越前的列名优先度越高</li></ul><p>9、大题30分：给定几个关系表，能用关系代数、SQL实现不同的查询</p><ul><li>自己练练，也可以去leetcode写写</li></ul><p>10、Like查询中“%”与“-”的应用</p><ul><li>%表示任意长度的字符串，-表示任一字符</li></ul><p>11、创建关系表、索引的语句</p><ul><li>CREATE TABLE &lt;关系表名&gt; {属性}</li><li>CREATE INDEX &lt;索引名&gt; on &lt;关系表名&gt;(&lt;列名&gt;) 普通索引</li><li>CREATE UNIQUE INDEX 唯一索引</li><li>在列名处可以写多个列创建组合索引，也可以添加ASC和DESC添加约束</li></ul><h2 id="四、数据库完整性"><a href="#四、数据库完整性" class="headerlink" title="四、数据库完整性"></a><strong>四、数据库完整性</strong></h2><p>1、掌握几类数据库完整性</p><ul><li>域（列）完整性-对数据表中字段属性约束，一般指数据的有效性，它包括字段的值域、字段的类型以及字段的有效规则等约束，它是由确定关系结构时所定义的字段的属性决定的。限制数据类型，缺省值，规则，约束，是否可以为空。域完整性可以确保不会输入无效的值</li><li>实体（行）完整性-对关系中的记录唯一性，也就是主键的约束。准确的说，实体完整性是指关系中的主属性值不能为NULL且不能有相同值。定义表中的所有行能唯一的表示，一般用主键，唯一索引unique关键字，及identity属性，比如说身份证号码，可以唯一标识一个人。</li><li>参照完整性-参照完整性是对关系数据库中建立关联关系的数据表间数据参照引用的约束，也就是对外键的约束。准确的说，参照完整性是指关系中的外键必须是另一个关系的主键有效值，或者是NULL。参照完整性维护表间数据的有效性，完整性，通常通过建立外部键联系另一表的主键实现，还可以用触发器来维护参考完整性。</li></ul><p>2、如何用sql语句定义数据库完整性</p><ul><li>用PRIMARY KEY关键字将表中的对应属性定义为主键。定义实体完整性。</li><li>用FOREIGN KEY REFERENCES关键字佳能表中的对应属性定义为外键。定义参照完整性。</li><li>其他的比如not null等关键字可以定义完整性的时候用上。</li><li>在drop、update和delete操作时，CASCADE、RESTRICT关键字会起到作用。前者是联级操作，即删除时会将有关联的表、项一起删掉，更新时会一起更新。后者则不会，但遇到违反参照完整性的情况的时候会报错</li></ul><h2 id="五、数据库安全性"><a href="#五、数据库安全性" class="headerlink" title="五、数据库安全性"></a><strong>五、数据库安全性</strong></h2><p>1、掌握几类数据库安全性控制的常用方法</p><ul><li>用户标识和鉴别：该方法由系统提供一定的方式让用户表示自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通鉴定后才能提供系统的使用权。</li><li>存取控制：通过用户权限定义和合法权检查确保只有合法权限的用户访问数据库，所有未授权的人员无法存取数据</li><li>视图机制：为不同的用户定义视图，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定的安全保护</li><li>审计：建立审计日志，把用户对数据库的所有操作自动记录下来并放入审计日志中，DBA（数据库管理员）可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人，时间和内容等</li><li>数据加密：对存储和传输的数据进行加密处理，从而使得不知道解密算法的人无法获知数据的内容。</li></ul><p>2、如何用sql语句定义授权和收回授权</p><ul><li>用GRANT语句和REVOKE语句</li><li>GRANT &lt;权限&gt; ON &lt;对象类型&gt;&lt;对象名&gt; TO &lt;用户&gt;</li><li>REVOKE &lt;权限&gt; ON  &lt;对象类型&gt;&lt;对象名&gt; TO &lt;用户&gt;</li><li>在句子的末尾加上WITH GRANT OPTION就是允许被授权用户授权其他用户</li></ul><h2 id="六、查询优化"><a href="#六、查询优化" class="headerlink" title="六、查询优化"></a><strong>六、查询优化</strong></h2><p>1、数据库查询处理的主要步骤及内容。</p><ul><li>查询分析。对查询语句进行扫码、词法分析和语法分析。判断是否符合规则。</li><li>查询检查。进行语义分析。检查语句中的数据库对象是否存在和有效。还要对用户的存取权限进行检查。对操作是否违反完整性约束进行检查。如果检查出来有问题，就拒绝这次查询。此时，完整性检查是初步、静态的检查。检查通过后，会将查询语句转换为内部表示，即等价的关系代数表达式。这个过程会把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般用查询树。如果是对视图的操作，就要用视图消解方法将对视图的操作转换成基本表的操作</li><li>查询优化：每个查询都有许多可拱选择的执行策略和操作算法。查询优化就是选择一个高效执行的查询处理策略。优化的层次：1）代数优化：关系代数表达式的优化，按照一定的规则，通过对关系代数表达式的等价变换，改变代数表达式中的次序和组合，使查询更高效。2）物理优化：指存取路径和底层操作算法的选择。选择高效合理的操作算法或存储路径依据看可以是基于规则的，也可以是基于代价的，还可以是基于语义的。</li><li>查询执行：依据优化器得到的执行策略生成查询计划，由代码生成器生成执行这个查询计划的代码，然后加以执行，回送查询结果。</li></ul><p>2、代数优化的一般原则</p><ul><li>先做选择、运用投影去除多余属性。</li></ul><p>3、哪些情况对属性建立索引比较合适？哪些情况不适合建立索引？</p><ul><li>字段数值唯一性限制</li><li>频繁作为where查询条件的字段</li><li>经常GROUP BY或ORDER BY的列</li><li>DISTINCT对应的0字段</li><li>连接多表时，表数不宜多，并对用于连接的字段作为索引，并且该字段在多张表中的类型必须一致</li><li>使用类型小的类创建索引</li><li>使用字符串前缀创建索引</li><li>区分度高（散列性高）的列适合作为索引</li><li>使用最频繁的列放到联合索引的左侧</li><li>多字段需要创建索引的时候，联合索引优于单值索引</li></ul><p>不适合建立：</p><ul><li>where中用不到的字段</li><li>数据量小的表最好不要使用</li><li>大量重复数据的列不要建立索引</li><li>避免对经常更新的表创建过多的索引</li><li>不建议用无序的值作为索引</li><li>删除不再使用或很少使用的索引</li><li>不要定义冗余或重复的索引</li></ul><p>4、笛卡尔运算切记不要滥用，有可能使查询很长时间</p><h2 id="七、关系规范化"><a href="#七、关系规范化" class="headerlink" title="七、关系规范化"></a><strong>七、关系规范化</strong></h2><p>1、掌握第一范式、第二范式和第三范式、BC范式定义及判断</p><ul><li>1nf：每一个关系的属性为不可分的原子值</li><li>2nf：满足1nf，非主属性完全函数依赖于候选码</li><li>3nf：满足2nf：消除非主属性对候选码的传递依赖</li><li>bcnf：满足3nf，消除每一属性对候选码的传递依赖</li></ul><p>2、给定一个不规范的应用，画出E-R图，能标注表的函数依赖关系，能判断属于第几范式，如果不规范能将表规范到第三范式。</p><ul><li>自己练练</li></ul><h2 id="八、数据库设计"><a href="#八、数据库设计" class="headerlink" title="八、数据库设计"></a><strong>八、数据库设计</strong></h2><p>1、局部E-R图合并成全局E-R图时可能出现的合并冲突有哪几种</p><ul><li>属性冲突：域冲突：属性值的类型、取值范围或取值集合不同。取值单位冲突：取值单位冲突</li><li>命名冲突：同名异义。异名同义。</li><li>结构冲突：同一对象在不同应用中有不同的抽象：如“课程”在一局部应用中是实体，在另一局部应用中是属性。同一实体在不同局部视图中所包含的属性不完全相同，或者属性的排列次序不完全相同。实体之间的联系在不同局部视图中呈现不同的类型。</li></ul><p>2、数据库的设计过程有哪些？</p><ul><li>需求分析阶段：是否做的充分与准确，决定了构建数据库的速度和质量</li><li>概念结构设计阶段：通过对用户需求进行总和、归纳与抽象。形成一个独立于具体数据库管理系统的概念模型</li><li>逻辑结构设计阶段：将概念结构转换为某个数据库管理系统所支持的数据模型，并对其进行优化</li><li>物理结构设计阶段：为逻辑数据结构选取一个最适合应用环境的物理结构。包括存储结构和存取方法</li><li>数据库实施阶段：根据逻辑设计和物理设计的结果构建数据库。编写与调试应用程序。组织数据入库并进行试运行。</li><li>数据库运行和维护阶段。经过试运行即可投入正式运行。在运行过程中必须不断对其进行评估、调整与修改</li></ul><p>3、实体几种联系转化为表的方式</p><ul><li><p>一对一：用一个表来记录即可。如夫妻表中记录男方和女方。或者在两个表中加入外键约束，将对方的主键加入作为外键。</p></li><li><p>一对多：把表A的主键，以联系的属性加入表B，即外键。（一A对多B）</p></li><li><p>多对多：在两个表之间建一个中间表。将两个表的主键以外键的形式放到此表。</p></li><li><p>具体情况具体分析吧。有多种建表方法。根据范式要求来建表</p></li></ul><h2 id="九、数据库恢复"><a href="#九、数据库恢复" class="headerlink" title="九、数据库恢复"></a><strong>九、数据库恢复</strong></h2><p>1、掌握事务的概念及事务的四个特性</p><ul><li>概念：指访问并可能更新数据库中各种数据项的一个程序执行单元。</li><li>原子性：事务时数据库的逻辑工作单位。事务中包括的操作要么多做，要么都不做。</li><li>一致性：事务执行的结果必须是使数据库从一个一致性状态道另一个一致性状态。</li><li>隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作和使用的数据对对其他并发的事务时隔离的。并发执行的各个事务之间不能互相干扰。</li><li>持续性：也称永久性。一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。。接下来的其他操作或故障不应该对其执行结果有任何影响。</li><li>这就是四个ACID属性</li></ul><p>2、什么是事务故障、系统故障和介质故障？产生原因，如果进行故障恢复？</p><ul><li>事务故障：某个事务在运行过程中由于种种原因未运行至正常终止点就夭折了。</li><li>恢复方法：撤销事务。即清楚该事务对数据库的所有修改，使得这个事务像没启动一样。需要从后到前撤销。需要从后到前扫描日志文件。</li><li>系统故障：造成系统停止运转的任何事件，使得系统需要重新启动</li><li>恢复方法：清楚尚未完成的书屋对数据库的所有修改，UNDM（撤销）所有未完成的事务（从后往前）。将缓冲区中已完成事务提交的结果写入数据库，REDO（重做）所有已提交的事务（从前往后）</li><li>介质故障：硬件故障使存储在硬盘上的数据丢失。（破坏性大于前两个）</li><li>恢复方法：在新磁盘上导入最新的数据库备份文件。根据日志文件，找出来从最新备份后开始，到故障发生时，哪些事务已完成。REDO所有已提交的事务。（从前往后）</li></ul><p>3、重点掌握具有检查点的恢复技术及恢复步骤</p><ul><li>恢复步骤：1）从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中会遭到检查点记录。</li><li>2）由该检查点记录得到该检查点建立时刻所有正在执行的任务清单ACTIVE-LIST</li><li>3）建立两个事务队列UNDOLIST和REDOLIST，刚开始都为空</li><li>4）把ACTIVE-LIST暂时放入UNDOLIST，然后将其中提交了的事务放入REDOLIST</li><li>5）先对UNDOLIST执行UNDO操作，接着对REDOLIST执行REDO操作</li><li>注意：UNDO应该从后往前，REDO应该从前往后</li><li>掌握要点</li></ul><p>4、常见的数据库保护措施有安全性保护，完整性保护，并发控制及其故障恢复</p><ul><li>rt</li></ul><h2 id="十、数据库并发控制"><a href="#十、数据库并发控制" class="headerlink" title="十、数据库并发控制"></a><strong>十、数据库并发控制</strong></h2><blockquote><p>到最后了！加油，看完这里就算简单复习了提纲</p></blockquote><p>1、数据库并发操作可能带来的数据不一致的几种形式</p><ul><li>丢失修改：两个事务同时修改，可能某个修改被破坏</li><li>不可重复读：当一个事务读取数据后，若另一个事务更新了数据，则前一个事务无法再现前一次读取的结果</li><li>读“脏”数据：一个事务修改了某个数据，并将其写回磁盘。另一个事务读取后，前一个事务却将操作撤回了，恢复原值。此时读取数据的事务读取到的数据和数据库中的不一样，就是“脏”数据。</li><li>这些情况破坏了事务的隔离性。为了应对这些问题。主要技术有：封锁、时间戳、乐观控制阀</li></ul><p>2、事务的定义、提交和回滚操作</p><ul><li>定义：以BEGIN TRANSACTION &lt;事务名&gt;起头，END TRANSACTION  &lt;事务名&gt;节尾。中间加入此事务包含的操作。</li><li>提交：COMMIT TRANSACTION &lt;事务名&gt; 提交事务，此操作后，数据才真正存入数据库</li><li>回滚：ROLLBACK TRANSACTION &lt;事务名&gt; 回滚事务，将事务回滚到事务的起点或事务内的某个保存点</li></ul><p>3、封锁机制是数据库并发控制的主要方式</p><ul><li>rt</li></ul><p>4、锁的主要类型及相容矩阵</p><ul><li>IS（意向共享）</li><li>S（共享）</li><li>U（更新）</li><li>IX（意向排他）</li><li>SIX（意向排他共享）</li><li>X（排他）</li><li>相容矩阵：表示两个事务之间是否可以同时对同一个对象加指定的锁。</li></ul><p><img src="/image/database1/1656784794114.png" alt="相容矩阵"></p><p><a href="https://www.jianshu.com/p/b312855d7d1b">具体看这里</a></p><p>5、死锁的定义，如何解除死锁</p><ul><li><p>产生死锁的原因是两个或多个事务都已封锁了一些数据对象，然后又都请求对已为其他事务封锁的数据对象加锁，从而出现死等待。</p></li><li><p>定义：两个资源相互等待</p></li><li><p>解决死锁的方法：预防、诊断解除</p></li><li><p>诊断方法：超时法和等待图法</p></li><li><p>超时法：如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。实现简单，但有可能误判死锁且时限若设置得太长，死锁发生后不能及时发现</p></li><li><p>等待图法：并发控制子系统周期性地（比如每隔数秒）生成事务等待图，检测事务。如果发现图中存在回路，则表示系统中出现了死锁。</p></li><li><p>解除法：选择一个处理死锁代价最小的事务，将其撤消。释放此事务持有的所有的锁，使其它事务能继续运行下去</p></li></ul><p>6、重点掌握三级封锁协议</p><ul><li><p>一级：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。其中还正常结束（COMMIT）<br>非正常结束（ROLLBACK）</p></li><li><p>一级封锁协议可防止丢失修改，并保证事务T是可恢复的。</p></li><li><p>在一级封锁协议中，如果仅仅是读数据不对其进行修改，是不需要加锁的，所以它不能保证可重复读和不读“脏”数据。</p></li><li><p>二级：一级封锁协议加上事务T在读取数据R之前必须先对其加S锁，读完后即可释放S锁。</p></li><li><p>二级封锁协议可以防止丢失修改和读“脏”数据</p></li><li><p>在二级封锁协议中，由于读完数据后即可释放S锁，所以它不能保证可重复读。</p></li><li><p>三级：一级封锁协议加上事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放</p></li><li><p>三级封锁协议可防止丢失修改、读脏数据和不可重复读。</p></li><li><p>三级协议的主要区别：什么操作需要申请封锁以及何时释放锁（即持锁时间）</p></li><li><p>不同的封锁协议使事务达到的一致性级别不同：封锁协议级别越高，一致性程度越高<br><img src="/image/database1/1656786346425.png" alt="一致性"></p></li></ul><p>7、什么是两段锁协议2PL</p><ul><li><p>两段锁协议规定所有的事务应遵守的规则：① 在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁。② 在释放一个封锁之后，事务不再申请和获得其它任何封锁。</p></li><li><p>即事务的执行分为两个阶段：第一阶段是获得封锁的阶段，称为扩展阶段。第二阶段是释放封锁的阶段，称为收缩阶段。</p></li></ul><p>8、满足两段锁协议是数据库并发调度可串行化的充分条件。</p><ul><li>DBMS对并发事务不同的调度可能会产生不同的结果，有正确的，有不正确的。显然串行调度是正确的。执行结果等价于串行调度的调度也是正确的，这样的调度叫做可串行化调度。</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二下期末复习-算法#1（线性规划和递归树）</title>
    <link href="/2022/06/29/algorithm1/"/>
    <url>/2022/06/29/algorithm1/</url>
    
    <content type="html"><![CDATA[<p>6.29下午考试，很急了。</p><p>想白兰，但条件不允许。</p><h2 id="单纯形法解线性规划"><a href="#单纯形法解线性规划" class="headerlink" title="单纯形法解线性规划"></a><strong>单纯形法解线性规划</strong></h2><blockquote><p>仅讲述大致思路</p></blockquote><ol><li>化为标准型。如下图。</li></ol><p><img src="/image/algorithm1/1656432963243.png" alt="标准型图"></p><ol><li>选定基变量。有几个等式就有几个基变量。</li><li>得出初始可行解。</li><li>根据目标函数的系数做出基入基操作。</li><li>得出新的可行解。</li><li>观察目标函数的各项系数，重复4、5，直到检验数（目标函数经过变基后的项系数）都小于等于0</li><li>此时的可行解即为最优解</li></ol><p>各种特殊情况：</p><ul><li>若检验数的某项为0，说明有无穷解。</li><li>退化问题。没有深入理解。但解决办法应该是保证基变量不能取0。因为保证单纯形法收敛的充分条件是：在迭代过程中的每个基本可行解的基变量数值都严格大于0。<del>看着来，我不是很会</del></li><li>某个决策变量的系数都小于0。代表这个区间无穷大。<del>但其实我也不知道无穷大意味着什么，无解吗</del></li><li>对于小于0的决策变量，用他的相反数来替代。</li><li>确定初始基本可行解。对于原问题的约束已经是标准型但没有基变量，可以人工添加变量作为基变量，随后进行入基出基操作，若最后的最优解中仍有人工添加的变量则代表无解。</li></ul><p>大致如上，可能有些许差错，自行判断。<del>真的很想摆</del></p><h2 id="递归树"><a href="#递归树" class="headerlink" title="递归树"></a><strong>递归树</strong></h2><blockquote><p>已经自己学习了无数次的内容，但是总是很快就忘掉了。再总结一次</p></blockquote><p>从一个例子入手也许会更容易理解和记忆</p><p>比如这个例子<strong>T(n) &#x3D; T(n&#x2F;3) + T(2n&#x2F;3) + n</strong></p><p>方程右部的两项不一样，无法合并。递归迭代法不行（<del>已经忘记了递归迭代法，但好像不考</del>），递归树行</p><p>直接进行一个递归树的看。</p><p><img src="/image/algorithm1/1656434478658.png" alt="递归树"></p><p>设这棵树的层数为k</p><p>这不是一棵平衡树，我们直接用最高层代表k。每一层都会变成上一层的2&#x2F;3。</p><p>有n*(2&#x2F;3)<sup>k</sup>&#x3D;1，因为到达最底层的时候，叶子节点对应的数为1。可得k&#x3D;log<sub>3&#x2F;2</sub>n</p><p>又可以得出，每层的复杂度都是O（n），<del>每一层都是Cn，C是常熟</del></p><p>因此T（n）&#x3D;kO（n）&#x3D;log<sub>3&#x2F;2</sub>nO(n)&#x3D;O(nlogn)</p><p>关键点：</p><ul><li>层数</li><li>每层的复杂度（或者说是和）</li></ul><p><del>感觉不难，就是容易忘</del></p><p>最后贴个图来方便理解吧</p><p><img src="/image/algorithm1/1656435873274.png" alt="递归树"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二下期末复习-计算机网络#2（试卷）</title>
    <link href="/2022/06/26/net2/"/>
    <url>/2022/06/26/net2/</url>
    
    <content type="html"><![CDATA[<style>hide {  background-color: #d6d6d6;  color: #d6d6d6;}hide:hover {  background-color: white;  color: black;}</style><p>0# 计算机网络复习记录（试卷篇）</p><blockquote><p>内容杂乱无章却没有严格的顺序，仅用于个人复习记录</p></blockquote><h2 id="本校考试中的题目总结"><a href="#本校考试中的题目总结" class="headerlink" title="本校考试中的题目总结"></a>本校考试中的题目总结</h2><blockquote><p>仅针对本校复习网站给出的卷子</p></blockquote><p>问题不分类了。直接按试卷顺序列出。</p><p>CDMA工作原理：<hide>码分多址。不分频道、时隙。信息传输靠不同的码型。操作起来就是将站点的芯片序列中的1变+1，0变-1，得到站点序列。当获得某个序列时，通过该序列和站点序列进行笛卡尔积操作即可获取到站点发送的信息。</p><p>海明码纠错原理：<hide>跟CRC类似。对于m位码字，检验位数要求 2<sup>r</sup> &gt;&#x3D; m+r+1 其中r为校验位。而后校验位放置在1 2 4 8 16 ……位上，将对应位的数据计算并记录。接收方验证时重新计算并验证即可。错误位是校验位加起来的和。</p><p>OSPF的五种报文：<hide>hello、DD、LSR、LSU、LSAck。</p><p>OSPF里的LSA：<hide>链路状态报告，列出了路由器的链路或接口，并指明它们的状态和沿每条链路方向出站的开销，以及该链路上所有已知的OSPF邻居。</p><p>OSPF里报文的作用：<hide>对应上述的顺序。发现、协商、维护（周期）OSPF邻居；数据库描述，携带LSA摘要；请求缺少的LSA；携带LSA信息的报文；确认收到LSU的报文，也携带了LSA摘要。</p><p>OSPF里的七种状态：<hide>down（机器启动）、init（初始）、2-way（双向）、exstart（准启动）、exchange（交换）、loading（装载）、full（完全毗邻）按顺序就是一般的状态变换顺序</p><p>将mac地址转换为eui-64地址：<hide>1、在mac地址中间插入0xFFFE，形成64位。2、将第一字节的第7位反转。例：00-AA-00-3F-2A-1C -&gt; 00-AA-00-FF-FE-3F-2A-1C -&gt; 02-AA-00-FF-FE-3F-2A-1C -&gt; 2AA:FF:FE3F:2A1C</p><p>网桥工作原理：<hide>泛洪、学习、转发、过滤</p><p>万维网由哪三部分组成：<hide>Url、http、html</p><p>IPv6头部有但IPv4头部没有的域：<hide>流标签</p><p>OSI参考模型的最上层：<hide>应用层</p><p>带宽和吞吐量的基本单位：<hide>bps</p><p>TCP段头中的窗口数大小怎么决定：<hide>拥塞窗口和接受方允许的窗口共同决定。取最小值。</p><p>BGP协议是什么：<hide>距离矢量路由选择协议。且克服了路由自环问题</p><p>回退n帧的信道利用率高还是选择性重传高：<hide>选择性重传</p><p>PSTN（公共交换电话网）组成部分：<hide>电话、端局、干线</p><p>现代电话系统的核心是：<hide>PCM</p><p>电话系统的时间间隔：<hide>125μs</p><p>RIP的度量：<hide>跳数</p><p>会增大冲突域的设备：<hide>集线器</p><p>广播地址和网络地址的特征：<hide>广播：主机位全1，网络：主机位全0</p><p>D类地址的子网掩码：<hide>D类地址是广播地址，没有子网掩码，没有缺省网关</p><p>如何判断ip地址是否合法：<hide>1、看是否是A、B、C类地址。2、看是否是回环地址（127开头）。3、看是否有超过256的数字出现。4、看网络位</p><p>OSPF的度量：<hide>带宽</p><p>抗电磁干扰的传输介质：<hide>光纤</p><p>从未通信过的主机的通信步骤：<hide>封装、arp请求、信息发送、mac寻址到第一个路由器、到达对应子网、mac寻址、信息到达、解封装</p><p>调制器调试方法：<hide>同相调幅、同幅调频</p><p>tcp数据段最大长度为65535，为什么最大载荷只有65495：<hide>tcp要封装进ip分组，ip分组的最大载荷只有65515，tcp数据段最小段头还有20，所以最大载荷是65495</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二下期末复习-计算机网络#1（试卷）</title>
    <link href="/2022/06/25/net1/"/>
    <url>/2022/06/25/net1/</url>
    
    <content type="html"><![CDATA[<style>hide {  background-color: #d6d6d6;  color: #d6d6d6;}hide:hover {  background-color: white;  color: black;}</style><h1 id="计算机网络复习记录（试卷篇）"><a href="#计算机网络复习记录（试卷篇）" class="headerlink" title="计算机网络复习记录（试卷篇）"></a>计算机网络复习记录（试卷篇）</h1><blockquote><p>内容杂乱无章却没有严格的顺序，仅用于个人复习记录</p></blockquote><h2 id="本校考试中的题目总结"><a href="#本校考试中的题目总结" class="headerlink" title="本校考试中的题目总结"></a>本校考试中的题目总结</h2><blockquote><p>仅针对本校复习网站给出的卷子</p></blockquote><p><strong>基本概念题：</strong></p><ul><li>什么是对等通信：<hide>参考模型的任意一层收到的数据和发出方对等层上发出的数据一样</li><li>PPP协议中的PAP认证是否可靠，为什么？：<hide>不可靠，因为PAP只需进行一次验证。用户名和密码的传送方式是明文的。CHAP采用周期性验证，安全性更高。</li><li>什么是波特率：<hide>每秒信号变幻的次数</li><li>交换机：<hide>交换机是目前常用的二层设备。具有智能帧过滤功能。</li><li>RFC：<hide>Request for comment，用来记录各种标准，是在线的技术报告</li><li>10base-t：<hide>10Mbps&#x2F;s，双绞线</li><li>10base-2：<hide>10Mbps&#x2F;s，200米有效传输距离，用的同轴电缆</li><li>10base-f：<hide>f是光纤的意思</li><li>基带传输和频带传输的区别：<hide>基带传输是信号传输，频带传输是模拟信号传输</li></ul><p><strong>osi参考模型的相关问题：</strong></p><ul><li>osi模型中据链路层的主要作用：<hide>1、成帧。2、差错控制。3、流量控制。4、链路控制。5、mac寻址。6、区分数据和控制信息。7、透明传输</li><li>osi模型中应用层的网络应用程序分为哪两类：<hide>直接网络应用和间接网络应用。</li><li>类似于osi的网络系体系结构分层的概念和作用：<hide>保持网络灵活，易于修改，把相关的网络功能组合在一层中。</li><li>ip协议是哪一层的：<hide>网络层</li><li>tcp协议是哪一层的：<hide>传输层</li><li>arp协议是哪一层的：<hide>数据链路层</li><li>telnet协议是哪一层的：<hide>应用层</li><li>ftp协议是哪一层的：<hide>应用层</li><li>icmp协议是哪一层的的：<hide>网络层</li></ul><p><strong>以太网的相关问题：</strong> </p><ul><li>物理拓扑结构：<hide>星型</li><li>逻辑拓扑结构：<hide>总线型</li><li>介质访问控制方式：<hide>CSMA&#x2F;CD方法（带有冲突检测的载波侦听多路存取）</li></ul><p><strong>UDP相关问题</strong></p><ul><li>可靠性：<hide>不可靠</li><li>是否有连接建立：<hide>没有</li><li>流量控制在什么层实现：<hide>不提供流量控制</li><li>广播还是单播： <hide>广播</li><li>类似于电路交换还是分组交换：<hide>分组交换</li></ul><p><strong>TCP相关问题</strong></p><ul><li>可靠性：<hide>可靠</li><li>是否有连接建立：<hide>有</li><li>广播还是单播：<hide>单播</li><li>流量控制在什么层实现：<hide>滑动窗口、传输层</li><li>类似于电路交换还是分组交换：<hide>电路交换</li></ul><p><strong>MAC地址的相关问题</strong></p><ul><li>高24位代表：<hide>生产厂商的标识</li></ul><p><strong>ip的相关问题</strong></p><ul><li>私有地址的特征：A类：<hide>10.0.0.0-10.255.255.255</hide> B类：<hide>172.16.0.0-172.31.255.255</hide> C类：<hide>192.168.0.0-192.168.255.255</hide> D类：<hide>D类没有私有地址，它的地址主要用于多点广播。</li><li>如何分类：<hide>A类：0开头。B类：10开头。C类：110开头。D类1110开头。</li><li>ipv4报文头中的TTL的作用：<hide>一个递减的计数器，防止报文在网络中永远保存</li><li>ipv6地址有几位：<hide>有128位</li><li>普通的ip网的服务方式和特点：<hide>尽力而为，先到先服务。</li><li>ipv4和ipv6定义的数据包的报头对比：<hide>ipv4字段多，但总长度少。ipv6反之。</li></ul><p><strong>UTP（非屏蔽双绞线）的相关问题</strong></p><ul><li>五类线的最大传输距离：<hide>100米</li></ul><p><strong>编码的相关问题：</strong></p><ul><li>全部码字中的海明距离指：<hide>任意两个码字的海明距离的最小值</li></ul><p><strong>路由的相关问题：</strong></p><ul><li>路由协议主要有哪两种：<hide>距离矢量</hide>和<hide>链路状态路由选择协议</li><li>什么是RIP：<hide>是一种距离矢量路由选择算法。目前仍然被广泛使用，但15跳的限制让它只适用于规模有限的网络。</li><li>OSPF基于什么方法：<hide>最短通路法和扩散法</li><li>缺省网关：<hide>即是默认网关。起代理arp作用。网关会用自己的mac地址和arp请求的目的ip对源计算机进行应答</li></ul><p><strong>介质访问控制协议相关问题</strong></p><ul><li>分隙ALOHA比纯ALOHA的主要改进之处：<hide>发送行为必须在时隙起始处，避免了在时隙中途冲突，提高了数据成功发送的概率，降低了冲突的危险。</li><li>CSMA&#x2F;CD协议是哪种方式的改进：<hide>1持续CSMA</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构作业记录#1</title>
    <link href="/2022/03/15/data-homework-1/"/>
    <url>/2022/03/15/data-homework-1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构大作业"><a href="#数据结构大作业" class="headerlink" title="数据结构大作业"></a>数据结构大作业</h1><p>大二下的其中一个长期任务。ddl是2022年4月20日。</p><h2 id="作业内容"><a href="#作业内容" class="headerlink" title="作业内容"></a>作业内容</h2><p>在诸多项目中选取一项。并根据要求完成项目的开发。</p><p>我们是一个二人小组，选取的项目是疫情模拟。</p><h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><blockquote><h3 id="疫情模拟系统"><a href="#疫情模拟系统" class="headerlink" title="疫情模拟系统"></a>疫情模拟系统</h3><p>介绍：新冠疫情肆虐下，各国采取不同的防疫策略，得到了不同的防疫效果。现就不同种类的防疫策略进行疫情模拟，完成以下（不限于）功能：</p><ul><li>初始状态设置。<br>用图形界面完成，人群总数不小于1000，有家庭、封闭公共场所（模拟商场、影院、教室等）、开放空间、医院、疫情隔离区。初始参数包括：Rt传染指数，流动指数，0代病人数量，隔离速度等等。</li><li>不同防疫策略下疫情的发展过程展示。其中，防御策略可分为：<blockquote><p> （1）完全开放。基本上不加任何管控，也基本不接种疫苗。</p><p> （2）疫苗接种+基本不管控。号召人群接种疫苗，但对公众出行活动基本不管控。期望随着疫苗接种率的提升，疫情得到控制。</p><p> （3）疫苗接种+公共场所适度管控。在加大疫苗接种的同时，对公众场所和人群出行进行适度管控，比如中小学停课，娱乐场所部分关闭，以及呼吁人群带口罩及消毒。</p><p> （4）疫苗接种+公共场所适度管控+零容忍。除了（3）的措施以外，严格执行“零容忍”，只要发现病人，立即隔离，并做好密接者排查和区域大排查。</p><p>要求对以上四种防疫策略，模拟随时间推移的疫情传播情况。除动态图形化模拟外，还应该有动态统计结果，包括：正常人数、患病人数、隔离人数、死亡人数、疫苗接种率……</p></blockquote></li><li>做四种防疫策略的对比，用图表等方式进行对比，并得出结论。</li></ul></blockquote><h3 id="作业开发工具与环境"><a href="#作业开发工具与环境" class="headerlink" title="作业开发工具与环境"></a>作业开发工具与环境</h3><p>工具:   <code>Qt Creator</code></p><p>环境:   <code>Qmake version 3.1. using Qt5.12.10</code></p><p>编译器: <code>MSVC-2017-32/64-bit </code></p><p>版本控制：<code>git</code></p><h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><p><a href="https://gitee.com/zongzongtate/data-struct-homework">地址</a></p><blockquote><p>暂时还是私密仓库。 <strong>——2022.3.15</strong></p></blockquote><h3 id="开发日志"><a href="#开发日志" class="headerlink" title="开发日志"></a>开发日志</h3><blockquote><p>Tips：截止至2022.3.15</p></blockquote><p>2022.2.23</p><ul><li>仓库初始化。</li><li>添加说明和注意事项。</li><li>添加作业要求。</li></ul><p>2022.2.24</p><ul><li>项目创建。</li><li>新增Human类。</li><li>实现了简单的移动。</li><li>基于QPainter类和TimerEvent函数实现了人类可视化。</li><li>修改了注意事项。</li></ul><p>2022.2.28</p><ul><li>新增Area类。</li><li>基于QPainter类和TimerEvent函数实现了区域可视化。</li><li>基本区域的可视化。</li><li>基于QLabel类，给区域打上对应的名字标签。</li><li>新增AreaPainter类。将Area类实例的可视化封装进入AreaPainter类中。</li><li>将一部分硬编码改为常数表示。</li><li>新增Vec2类。用于表示坐标。</li><li>新增Area类的开放和封锁状态和对应函数。</li></ul><p>2022.3.2</p><ul><li>新增可视化的区域</li><li>修改了移动算法。使移动更加自然。</li><li>更改枚举变量表示。由于报错，将enum设置的若干个状态改为const int来定义。如果能解决错误，会在后续的更新中改回。</li><li>修改了Human类的可视化绘画逻辑。节省了内存开销。</li></ul><p>2022.3.6</p><ul><li>规范注释。</li><li>新增TimeController类的抽象模型。用于控制模拟中的时间。</li></ul><p>2022.3.7</p><ul><li>新增待办列表。</li><li>新增Model类。提供参数设置和调用的API。</li><li>新增可视化区域。</li><li>更改Model类为单例模式。</li></ul><p>2022.3.8</p><ul><li>新增开始窗口。</li><li>补全注释。</li></ul><p>2022.3.9</p><ul><li>Model类添加成员。接收Human实例数目。</li><li>新增开始窗口的参数设置控件。</li><li>删除Human类中的感染函数。新增InfectedChecker类，控制Human实例之间的感染。</li><li>新增Human类的状态判断，根据Human实例的状态而改变可视化颜色。</li><li>将测试用硬编码改为Model类表示。</li><li>完成了TimeController类的实现。</li></ul><p>2022.3.10</p><ul><li>新增简单的隔离效果。</li><li>新增Human类中简单的职业区分。</li><li>新增Human类中职业的行动模型。</li><li>完善感染算法。</li><li>完善开始界面。</li></ul><p>2022.3.14</p><ul><li>新增Human类的潜伏状态。</li><li>修复了几个bug</li><li>新增大路区域，使感染的逻辑性更强。</li><li>新增InfectedChecker类的人数统计。可以返回当前感染人数和潜伏期人数。</li><li>修改了时间计数</li><li>新增图表统计功能。</li><li>优化了图表坐标的设置</li><li>重构区域可视化算法</li></ul><p>2022.3.15</p><ul><li>重构了人类可视化算法。新增HumanPainter类，将Human类的可视化功能封装进HumanPainter类中。</li><li>重构图表统计算法。新增InfectedChart类，将图表功能封装进InfectedChart类中。</li><li>补全注释</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新开始</title>
    <link href="/2022/03/15/restart/"/>
    <url>/2022/03/15/restart/</url>
    
    <content type="html"><![CDATA[<h1 id="重新开始"><a href="#重新开始" class="headerlink" title="重新开始"></a>重新开始</h1><p>之前其实有写过一个作为开头的文章。在年前定下了许多目标。但后来因为各种各样的原因，完成的情况并不理想。原本的博客也因为我的一些奇怪操作而炸了。</p><p>现在是打算重新开始。重新开始记录。</p><p>见证一下成长过程吧。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期计划#1</title>
    <link href="/2021/12/13/hello-world/"/>
    <url>/2021/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h3><p>从很久之前开始就想拥有一个自己的博客了。但是因为个人的畏难情绪一直没有真正行动起来。</p><blockquote><p>在 <a href="https://kiridore.github.io/about/">桐谷Dore</a> 的帮助下，终于是迈出了第一步。</p></blockquote><h3 id="为什么要开一个博客"><a href="#为什么要开一个博客" class="headerlink" title="为什么要开一个博客"></a>为什么要开一个博客</h3><p>作为一名学习计算机的在校大学生，如今已经是大二的年纪了。不幸的是，平常对于计算机的学习并没有深入，课程的学习也是囫囵吞枣。许多相关的专业知识基本一窍不通。也是在挂载这个博客的时候才第一次接触到git。这让我很不安，以至于感到了焦虑。</p><p>为了解决自己的烦恼、督促自己学习，我认为开一个博客进行记录是一个不错的选择。</p><h3 id="近期的计划"><a href="#近期的计划" class="headerlink" title="近期的计划"></a>近期的计划</h3><p>想做的事情有很多，在这里列出来慢慢完成吧。</p><ol><li>期末考试临近，需要完成以下科目的复习计划。<del>其实就是一科都没复习好</del>，</li></ol><ul><li>计算机组成（ ）</li><li>大物下（ ）</li><li>编译原理（ ）</li><li>数据结构（ ）</li><li>电工学（ ）<blockquote><p>上学期的我由于没有复习相关课程，在考前通宵复习才勉强避免挂科。</p></blockquote></li></ul><ol start="2"><li>11月期间，学习了一段时间的live2d模型的制作。但是后面由于事情的增多而搁置了。目标是在寒假期间完成学习，提高建模水平。</li></ol><ul><li>身体和头部九轴（ ）</li><li>身体挂件切换（ ）</li><li>嘴部制作（ ）<blockquote><p>学习live2d模型制作一是因为我个人对此十分感兴趣；二是因为目前虚拟主播对于live2d模型的需求依然很大，这或许会成为一个赚取外快的方式。<del>前提是我学的好</del></p></blockquote></li></ul><ol start="3"><li>cocos2dx引擎的学习与使用。想和 <a href="https://kiridore.github.io/about/">桐谷Dore</a> 一起制作一款长线放置游戏。目标是寒假期间能简单运用，并制作出一款能简单游玩的demo</li></ol><ul><li>待办事项有很多，目前仍然对此一窍不通。<blockquote><p>一切的一切都是因为遇到了一款十分对我们胃口的放置游戏—— <a href="http://idlegame.gitee.io/proto23/#">原型RPG</a> 然而，这款游戏的内容特别少，让我们十分失望，于是决定自己动手做一款。</p></blockquote></li></ul><h3 id="博客的更新"><a href="#博客的更新" class="headerlink" title="博客的更新"></a>博客的更新</h3><p>各方面的学习内容和近况都会视情况进行更新。期待时间的积累让我成长。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
